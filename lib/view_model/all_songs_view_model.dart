import 'package:flutter/widgets.dart';
import 'package:get/get.dart';
import 'package:get_storage/get_storage.dart';
import '../services/song_service.dart';

class AllSongsViewModel extends GetxController {
  var allList = [].obs;
  var isLoading = true.obs;
  var errorMessage = ''.obs;

  final box = GetStorage();

  @override
  void onInit() {
    super.onInit();
    fetchAllSongs();
  }

  Future<void> fetchAllSongs() async {
    try {
      isLoading(true);
      final token = box.read('token');

      if (token == null || token.isEmpty) {
        errorMessage.value = "‚ùå Token kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.";

        WidgetsBinding.instance.addPostFrameCallback((_) {
          Get.snackbar("L·ªói", errorMessage.value,
              snackPosition: SnackPosition.BOTTOM);
        });

        isLoading(false);
        return;
      }

      // L·∫•y danh s√°ch t·∫•t c·∫£ b√†i h√°t t·ª´ API
      final songs = await SongService.fetchSongs(token);
      print("‚úÖ Fetched ${songs.length} b√†i h√°t");
      allList.assignAll(songs);

      // L·∫•y danh s√°ch y√™u th√≠ch t·ª´ backend
      final backendFavorites = await SongService.fetchFavorites(token);

      // Gi·∫£ s·ª≠ backend tr·∫£ v·ªÅ danh s√°ch c√°c b√†i h√°t y√™u th√≠ch v√† m·ªói b√†i h√°t c√≥ tr∆∞·ªùng 'id'
      final favoriteIds = backendFavorites
          .map<String>((song) => song["id"].toString())
          .toList();

      // C·∫≠p nh·∫≠t v√†o local storage (tu·ª≥ ch·ªçn, ƒë·ªÉ d√πng cho UI nhanh)
      box.write('favorites', favoriteIds);

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i y√™u th√≠ch trong danh s√°ch b√†i h√°t
      updateFavorites(favoriteIds);
    } catch (e) {
      errorMessage.value = "‚ùå L·ªói khi t·∫£i b√†i h√°t: $e";

      WidgetsBinding.instance.addPostFrameCallback((_) {
        Get.snackbar("L·ªói", errorMessage.value,
            snackPosition: SnackPosition.BOTTOM);
      });

      allList.clear();
    } finally {
      isLoading(false);
    }
  }

  List<Map<String, dynamic>> getPlayableSongList() {
    return allList.map((song) {
      return {
        'id': song["id"].toString(),
        'title': song["title"] ?? 'Kh√¥ng t√™n',
        'artist': song["artist"] ?? 'Kh√¥ng r√µ',
        'album': '',
        'genre': song["genre"] ?? '',
        'image': '',
        'url': song["cloudinaryUrl"] ?? '',
        'user_id': '',
        'user_name': song["artist"] ?? '',
      };
    }).toList();
  }

  /// ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i y√™u th√≠ch theo danh s√°ch ID
  void updateFavorites(List<String> favoriteIds) {
    for (var i = 0; i < allList.length; i++) {
      final id = allList[i]['id'].toString();
      allList[i]['isFavorite'] = favoriteIds.contains(id);
    }
    allList.refresh(); // üîÑ C·∫≠p nh·∫≠t UI
  }

  /// ‚úÖ Toggle y√™u th√≠ch m·ªôt b√†i h√°t theo ID
  void toggleFavorite(String songId) async {
    final currentFavorites = box.read<List>('favorites')?.cast<String>() ?? [];
    final token = box.read('token');
    final userId = box.read('userId'); // nh·ªõ ƒë·∫£m b·∫£o ƒë√£ l∆∞u userId khi ƒëƒÉng nh·∫≠p

    if (token == null || userId == null) {
      print("‚ùå Token ho·∫∑c userId kh√¥ng t·ªìn t·∫°i.");
      return;
    }

    bool isNowFavorite;

    if (currentFavorites.contains(songId)) {
      currentFavorites.remove(songId);
      isNowFavorite = false;

      // G·ªçi API xo√° kh·ªèi y√™u th√≠ch
      final success = await SongService.removeFromFavorites(
        token: token,
        songId: songId,
        userId: userId,
      );

      if (!success) {
        print("‚ùå G·ª° y√™u th√≠ch th·∫•t b·∫°i.");
      }
    } else {
      currentFavorites.add(songId);
      isNowFavorite = true;

      // G·ªçi API th√™m v√†o y√™u th√≠ch
      final success = await SongService.addToFavorites(
        token: token,
        songId: songId,
        userId: userId,
      );

      if (!success) {
        print("‚ùå Th√™m y√™u th√≠ch th·∫•t b·∫°i.");
      }
    }

    // ‚úÖ Ghi l·∫°i danh s√°ch y√™u th√≠ch m·ªõi v√†o local storage
    box.write('favorites', currentFavorites);

    // ‚úÖ C·∫≠p nh·∫≠t l·∫°i tr·∫°ng th√°i b√†i h√°t
    updateFavorites(currentFavorites);

    // ‚úÖ Feedback ng∆∞·ªùi d√πng
    Get.snackbar(
      "Y√™u th√≠ch",
      isNowFavorite ? "ƒê√£ th√™m v√†o y√™u th√≠ch" : "ƒê√£ g·ª° kh·ªèi y√™u th√≠ch",
      snackPosition: SnackPosition.BOTTOM,
    );
  }

  /// ‚úÖ TƒÉng l∆∞·ª£t xem b√†i h√°t
  Future<void> incrementView(String songId) async {
    final token = box.read('token');
    if (token == null || token.isEmpty) {
      print("‚ùå Token kh√¥ng t·ªìn t·∫°i, kh√¥ng th·ªÉ tƒÉng l∆∞·ª£t xem.");
      return;
    }

    final songIdInt = int.tryParse(songId);
    if (songIdInt == null) {
      print("‚ùå songId kh√¥ng h·ª£p l·ªá: $songId");
      return;
    }

    try {
      await SongService.incrementView(songIdInt, token);
      print("‚úÖ TƒÉng l∆∞·ª£t xem b√†i h√°t $songId th√†nh c√¥ng");
    } catch (e) {
      print("‚ùå L·ªói tƒÉng l∆∞·ª£t xem: $e");
    }
  }
}
