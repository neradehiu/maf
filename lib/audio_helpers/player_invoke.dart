// lib/audio_helpers/player_invoke.dart

import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:audio_service/audio_service.dart';
import 'package:music_player/audio_helpers/mediaitem_converter.dart';
import 'package:music_player/audio_helpers/page_manager.dart';
import 'package:music_player/audio_helpers/service_locator.dart';

DateTime playerTapTime = DateTime.now();
Timer? debounce;

void playerPlayProcessDebounce(List songsList, int index) {
  debounce?.cancel();
  debounce = Timer(const Duration(milliseconds: 600), () {
    PlayerInvoke.init(songsList: songsList, index: index);
  });
}

class PlayerInvoke {
  static final pageManager = getIt<PageManager>();

  /// songsList: List<Map> ‚Äì ch√≠nh l√† playlist m√† b·∫°n truy·ªÅn t·ª´ MainPlayerView
  /// index: v·ªã tr√≠ c·ªßa b√†i ƒë∆∞·ª£c ch·ªçn
  static Future<void> init({
    required List songsList,
    required int index,
    bool fromMiniPlayer = false,
    bool shuffle = false,
    String? playlistBox,
  }) async {
    final globalIndex = index < 0 ? 0 : index;
    final finalList = List<Map<String, dynamic>>.from(songsList);
    if (shuffle) finalList.shuffle();

    if (!fromMiniPlayer && !kIsWeb) {
      await pageManager.stop(); // Ch·ªâ d·ª´ng audio_service tr√™n non-web
    }

    await setValues(finalList, globalIndex);
  }

  static Future<void> setValues(List arr, int index,
      {bool recommend = false}) async {
    // Chuy·ªÉn List<Map> th√†nh List<MediaItem>
    final queue = arr
        .map((songMap) => MediaItemConverter.mapToMediaItem(
        songMap as Map<String, dynamic>,
        autoplay: recommend))
        .toList();

    await updateNPlay(queue, index);
  }

  static Future<void> updateNPlay(
      List<MediaItem>? queue, int index) async {
    try {
      if (queue == null || index < 0 || index >= queue.length) {
        debugPrint('‚ö†Ô∏è [PlayerInvoke] queue is null or index out of range');
        return;
      }

      // Fix t·ª´ng MediaItem.id t·ª´ http:// ‚Üí https:// n·∫øu c·∫ßn
      final fixedQueue = queue.map((item) {
        final rawUrl = item.id;
        final fixedUrl = rawUrl.startsWith('http://')
            ? rawUrl.replaceFirst('http://', 'https://')
            : rawUrl;
        debugPrint("üîß [PlayerInvoke] rawUrl = $rawUrl ‚Üí fixedUrl = $fixedUrl");
        return item.copyWith(id: fixedUrl);
      }).toList();

      final mediaItem = fixedQueue[index];
      if (mediaItem.id.isEmpty) {
        debugPrint('‚ö†Ô∏è [PlayerInvoke] mediaItem.id r·ªóng');
        return;
      }

      // N·∫øu ch·∫°y Web, ta c·∫ßn truy·ªÅn playlist + startIndex ƒë·ªÉ Web qu·∫£n l√Ω ƒë√∫ng webPlaylist/webIndex
      if (kIsWeb) {
        debugPrint("‚ñ∂Ô∏è [PlayerInvoke] ƒêang ch·∫°y Web, g·ªçi playAS(url, playlist, startIndex)");
        await pageManager.playAS(
          mediaItem,
          playlist: fixedQueue,
          startIndex: index,
        );
        playerTapTime = DateTime.now();
        return;
      }

      // ------------------------------
      // Non‚ÄëWeb (Android/iOS/desktop)
      // ------------------------------
      debugPrint("‚ñ∂Ô∏è [PlayerInvoke] ƒêang ch·∫°y non‚ÄëWeb, g·ªçi setShuffleMode + adds + play");
      await pageManager.setShuffleMode(AudioServiceShuffleMode.none);
      await pageManager.adds(fixedQueue, index);
      pageManager.play();
      playerTapTime = DateTime.now();
    } catch (e, stack) {
      debugPrint('‚ö†Ô∏è [PlayerInvoke] Error playing audio: ${e.toString()}');
      debugPrint(stack.toString());
    }
  }
}
